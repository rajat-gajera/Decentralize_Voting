{"ast":null,"code":"var _jsxFileName = \"/home/rajat/Documents/blockchain/my/pet-shop/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  componentDidMount() {\n    this.loadBlockchainData();\n  }\n\n  async loadBlockchainData() {\n    const web3 = await getWeb3();\n    const network = web3.eth.net.getNetworktype();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"Hello World!\"));\n  }\n\n} // class App extends Component {\n//   state = { storageValue: 0, web3: null, accounts: null, contract: null };\n//   componentDidMount = async () => {\n//     try {\n//       // Get network provider and web3 instance.\n//       const web3 = await getWeb3();\n//       const network = await web3.eth.net.getNetworkType();\n//       console.log(\"network:\" + network);\n//       // Use web3 to get the user's accounts.\n//       const accounts = await web3.eth.getAccounts();\n//       console.log(\"accounts : \"+accounts);\n//       this.setState({accounts : accounts})\n//       // Get the contract instance.\n//       const networkId = await web3.eth.net.getId();\n//       const deployedNetwork = SimpleStorageContract.networks[networkId];\n//       const instance = new web3.eth.Contract(\n//         SimpleStorageContract.abi,\n//         deployedNetwork && deployedNetwork.address,\n//       );\n//       // Set web3, accounts, and contract to the state, and then proceed with an\n//       // example of interacting with the contract's methods.\n//       this.setState({ web3, accounts, contract: instance }, this.runExample);\n//     } catch (error) {\n//       // Catch any errors for any of the above operations.\n//       alert(\n//         `Failed to load web3, accounts, or contract. Check console for details.`,\n//       );\n//       console.error(error);\n//     }\n//   };\n//   runExample = async () => {\n//     const { accounts, contract } = this.state;\n//     // Stores a given value, 5 by default.\n//     await contract.methods.set(5).send({ from: accounts[0] });\n//     // Get the value from the contract to prove it worked.\n//     const response = await contract.methods.get().call();\n//     // Update state with the result.\n//     this.setState({ storageValue: response });\n//   };\n//   render() {\n//     if (!this.state.web3) {\n//       return <div>Loading Web3, accounts, and contract...</div>;\n//     }\n//     return (\n//       <div className=\"App\">\n//         <h1>Good to Go!</h1>\n//         <p>Your Truffle Box is installed and ready.</p>\n//         <h2>Smart Contract Example</h2>\n//         <p>\n//           If your contracts compiled and migrated successfully, below will show\n//           a stored value of 5 (by default).\n//         </p>\n//         <p>\n//           Try changing the value stored on <strong>line 40</strong> of App.js.\n//         </p>\n//         <div>The stored value is: {this.state.storageValue}</div>\n//       </div>\n//     );\n//   }\n// }\n\n\nexport default App;","map":{"version":3,"sources":["/home/rajat/Documents/blockchain/my/pet-shop/client/src/App.js"],"names":["React","Component","SimpleStorageContract","getWeb3","App","componentDidMount","loadBlockchainData","web3","network","eth","net","getNetworktype","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,qBAAP,MAAkC,gCAAlC;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAO,WAAP;;AAGA,MAAMC,GAAN,SAAkBH,SAAlB,CAA2B;AACzBI,EAAAA,iBAAiB,GAAE;AACnB,SAAKC,kBAAL;AACC;;AAED,QAAMA,kBAAN,GAA0B;AACxB,UAAMC,IAAI,GAAG,MAAMJ,OAAO,EAA1B;AACA,UAAMK,OAAO,GAAGD,IAAI,CAACE,GAAL,CAASC,GAAT,CAAaC,cAAb,EAAhB;AAED;;AAGDC,EAAAA,MAAM,GAAE;AACN,WACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CADF;AAKD;;AAlBwB,C,CAuB3B;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeR,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\n\nclass App extends Component{\n  componentDidMount(){\n  this.loadBlockchainData();\n  }\n\n  async loadBlockchainData(){\n    const web3 = await getWeb3();\n    const network = web3.eth.net.getNetworktype();  \n\n  }\n\n\n  render(){\n    return (\n      <div className=\"container\">\n        <h1>Hello World!</h1>\n      </div>\n    );\n  }\n}\n\n\n\n// class App extends Component {\n//   state = { storageValue: 0, web3: null, accounts: null, contract: null };\n\n//   componentDidMount = async () => {\n//     try {\n//       // Get network provider and web3 instance.\n//       const web3 = await getWeb3();\n\n//       const network = await web3.eth.net.getNetworkType();\n//       console.log(\"network:\" + network);\n//       // Use web3 to get the user's accounts.\n//       const accounts = await web3.eth.getAccounts();\n//       console.log(\"accounts : \"+accounts);\n//       this.setState({accounts : accounts})\n\n//       // Get the contract instance.\n//       const networkId = await web3.eth.net.getId();\n//       const deployedNetwork = SimpleStorageContract.networks[networkId];\n//       const instance = new web3.eth.Contract(\n//         SimpleStorageContract.abi,\n//         deployedNetwork && deployedNetwork.address,\n//       );\n\n//       // Set web3, accounts, and contract to the state, and then proceed with an\n//       // example of interacting with the contract's methods.\n//       this.setState({ web3, accounts, contract: instance }, this.runExample);\n//     } catch (error) {\n//       // Catch any errors for any of the above operations.\n//       alert(\n//         `Failed to load web3, accounts, or contract. Check console for details.`,\n//       );\n//       console.error(error);\n//     }\n//   };\n\n//   runExample = async () => {\n//     const { accounts, contract } = this.state;\n\n//     // Stores a given value, 5 by default.\n//     await contract.methods.set(5).send({ from: accounts[0] });\n\n//     // Get the value from the contract to prove it worked.\n//     const response = await contract.methods.get().call();\n\n//     // Update state with the result.\n//     this.setState({ storageValue: response });\n//   };\n\n//   render() {\n//     if (!this.state.web3) {\n//       return <div>Loading Web3, accounts, and contract...</div>;\n//     }\n//     return (\n//       <div className=\"App\">\n//         <h1>Good to Go!</h1>\n//         <p>Your Truffle Box is installed and ready.</p>\n//         <h2>Smart Contract Example</h2>\n//         <p>\n//           If your contracts compiled and migrated successfully, below will show\n//           a stored value of 5 (by default).\n//         </p>\n//         <p>\n//           Try changing the value stored on <strong>line 40</strong> of App.js.\n//         </p>\n//         <div>The stored value is: {this.state.storageValue}</div>\n//       </div>\n//     );\n//   }\n// }\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}