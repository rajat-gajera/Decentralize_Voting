{"ast":null,"code":"var _jsxFileName = \"/home/rajat/Documents/blockchain/my/pet-shop/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Admin from \"./Admin\";\nimport Voters from \"./Voters\";\n\nclass App extends Component {\n  // state = { storageValue: 0, web3: null, accounts: null, contract: null };\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      // FOR REFRESHING PAGE ONLY ONCE -\n      if (!window.location.hash) {\n        window.location = window.location + \"#loaded\";\n        window.location.reload();\n      }\n\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts();\n        console.log(\"Acooutn s \" + accounts[0]); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = Voting.networks[networkId];\n        console.log(\"networkid: \" + networkId + \"  deploynetworkid : \" + deployedNetwork.address);\n        const instance = new web3.eth.Contract(Voting.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n        // this.sue end falseetState({ web3, accounts, contract: instance }, this.runExample);\n\n        this.setState({\n          VotingInstance: instance,\n          account: accounts[0],\n          web3: web3\n        });\n        const owner = await this.state.VotingInstance.methods.getOwner().call();\n\n        if (this.state.account === owner) {\n          this.setState({\n            isOwner: true\n          });\n        } // this.state.VotingInstance.methods.startElection().send({from:this.state.account});\n\n\n        let st = await this.state.VotingInstance.methods.getStart().call();\n        let en = await this.state.VotingInstance.methods.getEnd().call();\n        this.setState({\n          start: st,\n          end: en\n        });\n        this.updateCandidateList();\n        this.updateVoterList();\n        var i = 0;\n\n        for (i = 0; i < this.state.voterList.length; i++) {\n          if (this.state.voterList[i].voteraddress === this.state.account) {\n            this.state({\n              voterequested: true\n            });\n            break;\n          }\n        }\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.StartElection = event => {\n      console.log(this.state.VotingInstance);\n\n      if (event.target.name === \"startElection\") {\n        this.state.VotingInstance.methods.startElection().send({\n          from: this.state.account\n        }).then(() => {\n          this.setState({\n            start: true,\n            end: false\n          });\n          console.log(\"Election Started!!\");\n        });\n      }\n    };\n\n    this.EndElection = event => {\n      if (event.target.name === \"endElection\") {\n        this.state.VotingInstance.methods.endElection().send({\n          from: this.state.account\n        }).then(() => {\n          this.setState({\n            start: false,\n            end: true\n          });\n          console.log(\"Election Ended!!\");\n        });\n      }\n    };\n\n    this.updateCandidateList = () => {\n      this.state.VotingInstance.methods.getCandidateList().call().then(candidates => {\n        this.setState({\n          candidateList: candidates\n        });\n      });\n    };\n\n    this.AddCandidate = candidate => {\n      this.state.VotingInstance.methods.addCandidate(candidate.name, candidate.party, candidate.manifesto, candidate.constituency).send({\n        from: this.state.account\n      }).then(response => {\n        alert(response);\n        console.log(response);\n      });\n      this.updateCandidateList(); //  const t =this.state.VotingInstance.methods\n      //     .getCandidateNumber()\n      //     .call()\n      //     .then((candidateCount)=>{\n      //       console.log(\"----------\")\n      //       console.log(candidateCount);\n      //       return candidateCount\n      //       });\n    };\n\n    this.requestVoter = voter => {\n      console.log(\"App js ma \");\n      console.log(voter);\n      this.state.VotingInstance.methods.requestVoter(voter.name, voter.votingCardNumber, voter.constituency).send({\n        from: this.state.account\n      }).then(() => {\n        console.log(\"Voter Requested\");\n      });\n    };\n\n    this.updateVoterList = () => {\n      this.state.VotingInstance.methods.getVoterList().call().then(voters => {\n        this.setState({\n          voterList: voters\n        });\n      });\n    };\n\n    this.state = {\n      VotingInstance: undefined,\n      account: null,\n      web3: null,\n      isOwner: false,\n      candidateList: [],\n      voterList: [],\n      voterequested: false,\n      voted: false\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, this.state.isOwner ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(Admin, {\n      accountAddress: this.state.account,\n      startStatus: this.state.start,\n      endStatus: this.state.end,\n      onEleStartClick: this.StartElection,\n      onEleEndClick: this.EndElection,\n      addCandidate: candidate => {\n        this.AddCandidate(candidate);\n      },\n      candidateList: this.state.candidateList,\n      voterList: this.state.voterList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(Voters, {\n      voterRequested: this.state.voterequested,\n      candidateList: this.state.candidateList,\n      requestVoter: voter => {\n        this.requestVoter(voter);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/rajat/Documents/blockchain/my/pet-shop/client/src/App.js"],"names":["React","Component","Voting","getWeb3","Admin","Voters","App","constructor","props","componentDidMount","window","location","hash","reload","web3","accounts","eth","getAccounts","console","log","networkId","net","getId","deployedNetwork","networks","address","instance","Contract","abi","setState","VotingInstance","account","owner","state","methods","getOwner","call","isOwner","st","getStart","en","getEnd","start","end","updateCandidateList","updateVoterList","i","voterList","length","voteraddress","voterequested","error","alert","StartElection","event","target","name","startElection","send","from","then","EndElection","endElection","getCandidateList","candidates","candidateList","AddCandidate","candidate","addCandidate","party","manifesto","constituency","response","requestVoter","voter","votingCardNumber","getVoterList","voters","undefined","voted","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Admin from \"./Admin\";\nimport Voters from \"./Voters\";\n\nclass App extends Component {\n  // state = { storageValue: 0, web3: null, accounts: null, contract: null };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      VotingInstance: undefined,\n      account: null,\n      web3: null,\n      isOwner: false,\n      candidateList: [],\n      voterList:[],\n       voterequested:false,\n       voted:false\n    };\n  }\n\n  componentDidMount = async () => {\n    // FOR REFRESHING PAGE ONLY ONCE -\n    if (!window.location.hash) {\n      window.location = window.location + \"#loaded\";\n      window.location.reload();\n    }\n\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      console.log(\"Acooutn s \" + accounts[0]);\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Voting.networks[networkId];\n      console.log(\n        \"networkid: \" +\n          networkId +\n          \"  deploynetworkid : \" +\n          deployedNetwork.address\n      );\n      const instance = new web3.eth.Contract(\n        Voting.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      // this.sue end falseetState({ web3, accounts, contract: instance }, this.runExample);\n      this.setState({\n        VotingInstance: instance,\n        account: accounts[0],\n        web3: web3,\n      });\n      const owner = await this.state.VotingInstance.methods.getOwner().call();\n      if (this.state.account === owner) {\n        this.setState({ isOwner: true });\n      }\n      // this.state.VotingInstance.methods.startElection().send({from:this.state.account});\n\n      let st = await this.state.VotingInstance.methods.getStart().call();\n      let en = await this.state.VotingInstance.methods.getEnd().call();\n      this.setState({ start: st, end: en });\n      this.updateCandidateList();\n      this.updateVoterList();\n     var i=0;\n      for(i=0;i<this.state.voterList.length ;i++)\n      {\n        if(this.state.voterList[i].voteraddress === this.state.account)\n        {\n          this.state({voterequested:true});\n          break;\n        }\n      }\n\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n  //-----------------------------------------------------------------------------------------------------------------------\n\n  //-----------------------------------------------------------------------------------------------------------------------\n  StartElection = (event) => {\n    console.log(this.state.VotingInstance);\n    if (event.target.name === \"startElection\") {\n      this.state.VotingInstance.methods\n        .startElection()\n        .send({ from: this.state.account })\n        .then(() => {\n          this.setState({ start: true, end: false });\n          console.log(\"Election Started!!\");\n        });\n    }\n  };\n  EndElection = (event) => {\n    if (event.target.name === \"endElection\") {\n      this.state.VotingInstance.methods\n        .endElection()\n        .send({ from: this.state.account })\n        .then(() => {\n          this.setState({ start: false, end: true });\n          console.log(\"Election Ended!!\");\n        });\n    }\n  };\n  updateCandidateList = () => {\n    this.state.VotingInstance.methods\n      .getCandidateList()\n      .call()\n      .then((candidates) => {\n        this.setState({ candidateList: candidates });\n      });\n  };\n  AddCandidate = (candidate) => {\n    this.state.VotingInstance.methods\n      .addCandidate(\n        candidate.name,\n        candidate.party,\n        candidate.manifesto,\n        candidate.constituency\n      )\n      .send({ from: this.state.account })\n      .then((response) => {\n        alert(response);\n        console.log(response);\n      });\n\n    this.updateCandidateList();\n\n    //  const t =this.state.VotingInstance.methods\n    //     .getCandidateNumber()\n    //     .call()\n    //     .then((candidateCount)=>{\n\n    //       console.log(\"----------\")\n    //       console.log(candidateCount);\n    //       return candidateCount\n    //       });\n  };\n  requestVoter = (voter) => {\n    console.log(\"App js ma \");\n    console.log(voter);\n    this.state.VotingInstance.methods\n      .requestVoter(voter.name,voter.votingCardNumber,voter.constituency)\n      .send({ from: this.state.account })\n      .then(()=>{\n        console.log(\"Voter Requested\")\n      });\n  };\n  updateVoterList=()=>{\n    this.state.VotingInstance.methods.getVoterList().call().then(\n      (voters)=>{\n       \n        this.setState({voterList : voters});\n      }\n    );\n  }\n  \n\n   \n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    return (\n      <React.Fragment>\n        <div className=\"App\">\n          {this.state.isOwner ? (\n            <div>\n              <Admin\n                accountAddress={this.state.account}\n                startStatus={this.state.start}\n                endStatus={this.state.end}\n                onEleStartClick={this.StartElection}\n                onEleEndClick={this.EndElection}\n                addCandidate={(candidate) => {\n                  this.AddCandidate(candidate);\n                }}\n                candidateList={this.state.candidateList}\n                voterList = { this.state.voterList}\n              />\n            </div>\n          ) : (\n            <div>\n              <Voters\n                voterRequested={this.state.voterequested}\n                candidateList={this.state.candidateList}\n                requestVoter={(voter) => {\n                  this.requestVoter(voter);\n                }}\n              />\n            </div>\n          )}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}