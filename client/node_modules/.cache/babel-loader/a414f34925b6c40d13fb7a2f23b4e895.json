{"ast":null,"code":"var _jsxFileName = \"/home/rajat/Documents/blockchain/my/pet-shop/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Admin from \"./Admin\";\nimport Voters from \"./Voters\";\n\nclass App extends Component {\n  // state = { storageValue: 0, web3: null, accounts: null, contract: null };\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      // FOR REFRESHING PAGE ONLY ONCE -\n      if (!window.location.hash) {\n        window.location = window.location + \"#loaded\";\n        window.location.reload();\n      }\n\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts();\n        console.log(\"Acooutn s \" + accounts[0]); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = Voting.networks[networkId];\n        console.log(\"networkid: \" + networkId + \"  deploynetworkid : \" + deployedNetwork.address);\n        const instance = new web3.eth.Contract(Voting.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n        // this.sue end falseetState({ web3, accounts, contract: instance }, this.runExample);\n\n        this.setState({\n          VotingInstance: instance,\n          account: accounts[0],\n          web3: web3\n        });\n        const owner = await this.state.VotingInstance.methods.getOwner().call();\n\n        if (this.state.account === owner) {\n          this.setState({\n            isOwner: true\n          });\n        } // this.state.VotingInstance.methods.startElection().send({from:this.state.account});\n\n\n        let st = await this.state.VotingInstance.methods.getStart().call();\n        let en = await this.state.VotingInstance.methods.getEnd().call();\n        this.setState({\n          start: st,\n          end: en\n        });\n        this.updateCandidateList();\n        this.updateVoterList();\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.StartElection = event => {\n      console.log(this.state.VotingInstance);\n\n      if (event.target.name === \"startElection\") {\n        this.state.VotingInstance.methods.startElection().send({\n          from: this.state.account\n        }).then(() => {\n          this.setState({\n            start: true,\n            end: false\n          });\n          console.log(\"Election Started!!\");\n        });\n      }\n    };\n\n    this.EndElection = event => {\n      if (event.target.name === \"endElection\") {\n        this.state.VotingInstance.methods.endElection().send({\n          from: this.state.account\n        }).then(() => {\n          this.setState({\n            start: false,\n            end: true\n          });\n          console.log(\"Election Ended!!\");\n        });\n      }\n    };\n\n    this.updateCandidateList = () => {\n      this.state.VotingInstance.methods.getCandidateList().call().then(candidates => {\n        this.setState({\n          candidateList: candidates\n        });\n      });\n    };\n\n    this.AddCandidate = candidate => {\n      this.state.VotingInstance.methods.addCandidate(candidate.name, candidate.party, candidate.manifesto, candidate.constituency).send({\n        from: this.state.account\n      }).then(response => {\n        alert(response);\n        console.log(response);\n      });\n      this.updateCandidateList(); //  const t =this.state.VotingInstance.methods\n      //     .getCandidateNumber()\n      //     .call()\n      //     .then((candidateCount)=>{\n      //       console.log(\"----------\")\n      //       console.log(candidateCount);\n      //       return candidateCount\n      //       });\n    };\n\n    this.requestVoter = voter => {\n      console.log(\"App js ma \");\n      console.log(voter);\n      this.state.VotingInstance.methods.requestVoter(voter.name, voter.votingCardNumber, voter.constituency).send({\n        from: this.state.account\n      }).then(() => {\n        console.log(\"Voter Requested\");\n      });\n    };\n\n    this.updateVoterList = () => {\n      this.state.VotingInstance.methods.getVoterList().call().then(voters => {\n        //  this.setState({ voterList: voters });\n        var i = 0;\n\n        for (i = 0; i < voters.length; i++) {\n          const cvv = voters[i];\n          console.log(cvv);\n          this.state.VotingInstance.methods.voterDetails(cvv.voterAddress).call().then(cv => {\n            console.log(cv);\n            const vtList = [...this.state.voterList];\n            vtList.push({\n              voterAddress: cv.voterAddress,\n              name: cv.name,\n              votingCardNumber: cv.votingCardNumber,\n              constituency: cv.constituency,\n              hasVoted: cv.hasVoted,\n              hasVerified: cv.hasVerified\n            });\n            this.setState({\n              voterList: vtList\n            });\n          });\n        }\n      });\n    };\n\n    this.VerifyVoter = _address => {\n      this.state.VotingInstance.methods.verifyVoter(_address).send({\n        from: this.state.account\n      }).then(() => {\n        alert(_address + \"Verfied!!\");\n      });\n    };\n\n    this.Vote = candidate => {\n      alert(candidate.candidateId);\n      this.state.VotingInstance.methods.Vote(candidate.candidateId).send({\n        from: this.state.account\n      }).then(() => {\n        alert(\"You Have Voter to \" + candidate.name);\n      });\n    };\n\n    this.DeclareResult = () => {\n      alert(\"Result Declared!!\");\n      this.state.VotingInstance.methods.getCandidateNumber().call().then(candidateCount => {\n        var candidateList = [];\n\n        for (var i = 0; i < candidateCount; i++) {\n          this.state.VotingInstance.methods.candidateDetails(i).call().then(currentCandidate => {\n            candidateList.push(currentCandidate);\n          });\n        }\n\n        this.setState({\n          candidateList: candidateList\n        });\n        console.log(\"*********\");\n        console.log(this.state.candidateList);\n      });\n    };\n\n    this.state = {\n      VotingInstance: undefined,\n      account: null,\n      web3: null,\n      isOwner: false,\n      candidateList: [],\n      voterList: [],\n      voterequested: false,\n      voted: false,\n      voterVerified: false\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, this.state.isOwner ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(Admin, {\n      accountAddress: this.state.account,\n      startStatus: this.state.start,\n      endStatus: this.state.end,\n      onEleStartClick: this.StartElection,\n      onEleEndClick: this.EndElection,\n      addCandidate: candidate => {\n        this.AddCandidate(candidate);\n      },\n      candidateList: this.state.candidateList,\n      voterList: this.state.voterList,\n      verifyVoter: address => {\n        this.VerifyVoter(address);\n      },\n      onDeclareResutClick: this.DeclareResult,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, React.createElement(Voters, {\n      voterRequested: this.state.voterequested,\n      candidateList: this.state.candidateList,\n      requestVoter: voter => {\n        this.requestVoter(voter);\n      },\n      Vote: candidate => {\n        this.Vote(candidate);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/rajat/Documents/blockchain/my/pet-shop/client/src/App.js"],"names":["React","Component","Voting","getWeb3","Admin","Voters","App","constructor","props","componentDidMount","window","location","hash","reload","web3","accounts","eth","getAccounts","console","log","networkId","net","getId","deployedNetwork","networks","address","instance","Contract","abi","setState","VotingInstance","account","owner","state","methods","getOwner","call","isOwner","st","getStart","en","getEnd","start","end","updateCandidateList","updateVoterList","error","alert","StartElection","event","target","name","startElection","send","from","then","EndElection","endElection","getCandidateList","candidates","candidateList","AddCandidate","candidate","addCandidate","party","manifesto","constituency","response","requestVoter","voter","votingCardNumber","getVoterList","voters","i","length","cvv","voterDetails","voterAddress","cv","vtList","voterList","push","hasVoted","hasVerified","VerifyVoter","_address","verifyVoter","Vote","candidateId","DeclareResult","getCandidateNumber","candidateCount","candidateDetails","currentCandidate","undefined","voterequested","voted","voterVerified","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Admin from \"./Admin\";\nimport Voters from \"./Voters\";\n\nclass App extends Component {\n  // state = { storageValue: 0, web3: null, accounts: null, contract: null };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      VotingInstance: undefined,\n      account: null,\n      web3: null,\n      isOwner: false,\n      candidateList: [],\n      voterList: [],\n      voterequested: false,\n      voted: false,\n      voterVerified: false,\n    };\n  }\n\n  componentDidMount = async () => {\n    // FOR REFRESHING PAGE ONLY ONCE -\n    if (!window.location.hash) {\n      window.location = window.location + \"#loaded\";\n      window.location.reload();\n    }\n\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      console.log(\"Acooutn s \" + accounts[0]);\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Voting.networks[networkId];\n      console.log(\n        \"networkid: \" +\n          networkId +\n          \"  deploynetworkid : \" +\n          deployedNetwork.address\n      );\n      const instance = new web3.eth.Contract(\n        Voting.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      // this.sue end falseetState({ web3, accounts, contract: instance }, this.runExample);\n      this.setState({\n        VotingInstance: instance,\n        account: accounts[0],\n        web3: web3,\n      });\n      const owner = await this.state.VotingInstance.methods.getOwner().call();\n      if (this.state.account === owner) {\n        this.setState({ isOwner: true });\n      }\n      // this.state.VotingInstance.methods.startElection().send({from:this.state.account});\n\n      let st = await this.state.VotingInstance.methods.getStart().call();\n      let en = await this.state.VotingInstance.methods.getEnd().call();\n\n      this.setState({ start: st, end: en });\n      this.updateCandidateList();\n      this.updateVoterList();\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n  //-----------------------------------------------------------------------------------------------------------------------\n\n  //-----------------------------------------------------------------------------------------------------------------------\n  StartElection = (event) => {\n    console.log(this.state.VotingInstance);\n    if (event.target.name === \"startElection\") {\n      this.state.VotingInstance.methods\n        .startElection()\n        .send({ from: this.state.account })\n        .then(() => {\n          this.setState({ start: true, end: false });\n          console.log(\"Election Started!!\");\n        });\n    }\n  };\n  EndElection = (event) => {\n    if (event.target.name === \"endElection\") {\n      this.state.VotingInstance.methods\n        .endElection()\n        .send({ from: this.state.account })\n        .then(() => {\n          this.setState({ start: false, end: true });\n          console.log(\"Election Ended!!\");\n        });\n    }\n  };\n  updateCandidateList = () => {\n    this.state.VotingInstance.methods\n      .getCandidateList()\n      .call()\n      .then((candidates) => {\n        this.setState({ candidateList: candidates });\n      });\n  };\n  AddCandidate = (candidate) => {\n    this.state.VotingInstance.methods\n      .addCandidate(\n        candidate.name,\n        candidate.party,\n        candidate.manifesto,\n        candidate.constituency\n      )\n      .send({ from: this.state.account })\n      .then((response) => {\n        alert(response);\n        console.log(response);\n      });\n\n    this.updateCandidateList();\n\n    //  const t =this.state.VotingInstance.methods\n    //     .getCandidateNumber()\n    //     .call()\n    //     .then((candidateCount)=>{\n\n    //       console.log(\"----------\")\n    //       console.log(candidateCount);\n    //       return candidateCount\n    //       });\n  };\n  requestVoter = (voter) => {\n    console.log(\"App js ma \");\n    console.log(voter);\n    this.state.VotingInstance.methods\n      .requestVoter(voter.name, voter.votingCardNumber, voter.constituency)\n      .send({ from: this.state.account })\n      .then(() => {\n        console.log(\"Voter Requested\");\n      });\n  };\n  updateVoterList = () => {\n    this.state.VotingInstance.methods\n      .getVoterList()\n      .call()\n      .then((voters) => {\n        //  this.setState({ voterList: voters });\n        var i = 0;\n        for (i = 0; i < voters.length; i++) {\n          const cvv = voters[i];\n          console.log(cvv);\n          this.state.VotingInstance.methods\n            .voterDetails(cvv.voterAddress)\n            .call()\n            .then((cv) => {\n              console.log(cv);\n              const vtList = [...this.state.voterList];\n              vtList.push({\n                voterAddress: cv.voterAddress,\n                name: cv.name,\n                votingCardNumber: cv.votingCardNumber,\n                constituency: cv.constituency,\n                hasVoted: cv.hasVoted,\n                hasVerified: cv.hasVerified,\n              });\n              this.setState({\n                voterList: vtList,\n              });\n            });\n        }\n      });\n  };\n  VerifyVoter = (_address) => {\n    this.state.VotingInstance.methods\n      .verifyVoter(_address)\n      .send({ from: this.state.account })\n      .then(() => {\n        alert(_address + \"Verfied!!\");\n      });\n  };\n  Vote = (candidate) => {\n    alert(candidate.candidateId);\n    this.state.VotingInstance.methods\n      .Vote(candidate.candidateId)\n      .send({ from: this.state.account })\n      .then(() => {\n        alert(\"You Have Voter to \" + candidate.name);\n      });\n  };\n\n  DeclareResult = () => {\n    alert(\"Result Declared!!\");\n    this.state.VotingInstance.methods.getCandidateNumber().call().then(\n      (candidateCount)=>{\n        var candidateList =[];\n        for(var i=0;i<candidateCount;i++)\n        {\n          this.state.VotingInstance.methods.candidateDetails(i).call().then(\n            (currentCandidate)=>{\n              candidateList.push(currentCandidate);\n            }\n          );\n        }\n        this.setState({candidateList:candidateList});\n        console.log(\"*********\");\n        console.log(this.state.candidateList);\n      }\n    );\n\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    return (\n      <React.Fragment>\n        <div className=\"App\">\n          {this.state.isOwner ? (\n            <div>\n              <Admin\n                accountAddress={this.state.account}\n                startStatus={this.state.start}\n                endStatus={this.state.end}\n                onEleStartClick={this.StartElection}\n                onEleEndClick={this.EndElection}\n                addCandidate={(candidate) => {\n                  this.AddCandidate(candidate);\n                }}\n                candidateList={this.state.candidateList}\n                voterList={this.state.voterList}\n                verifyVoter={(address) => {\n                  this.VerifyVoter(address);\n                }}\n                onDeclareResutClick={this.DeclareResult}\n              />\n            </div>\n          ) : (\n            <div>\n              <Voters\n                voterRequested={this.state.voterequested}\n                candidateList={this.state.candidateList}\n                requestVoter={(voter) => {\n                  this.requestVoter(voter);\n                }}\n                Vote={(candidate) => {\n                  this.Vote(candidate);\n                }}\n              />\n            </div>\n          )}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}