{"ast":null,"code":"var _jsxFileName = \"/home/rajat/Documents/blockchain/my/pet-shop/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Admin from \"./Admin\";\nimport AddCandidateFormComp from \"./AddCandidateFormComp\";\n\nclass App extends Component {\n  // state = { storageValue: 0, web3: null, accounts: null, contract: null };\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      // FOR REFRESHING PAGE ONLY ONCE -\n      if (!window.location.hash) {\n        window.location = window.location + \"#loaded\";\n        window.location.reload();\n      }\n\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts();\n        console.log(\"Acooutn s \" + accounts[0]); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = Voting.networks[networkId];\n        console.log(\"networkid: \" + networkId + \"  deploynetworkid : \" + deployedNetwork.address);\n        const instance = new web3.eth.Contract(Voting.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n        // this.sue end falseetState({ web3, accounts, contract: instance }, this.runExample);\n\n        this.setState({\n          VotingInstance: instance,\n          account: accounts[0],\n          web3: web3\n        });\n        const owner = await this.state.VotingInstance.methods.getOwner().call();\n\n        if (this.state.account === owner) {\n          this.setState({\n            isOwner: true\n          });\n        } // this.state.VotingInstance.methods.startElection().send({from:this.state.account});\n\n\n        let st = await this.state.VotingInstance.methods.getStart().call();\n        let en = await this.state.VotingInstance.methods.getEnd().call();\n        this.setState({\n          start: st,\n          end: en\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.StartElection = event => {\n      console.log(this.state.VotingInstance);\n\n      if (event.target.name === \"startElection\") {\n        this.state.VotingInstance.methods.startElection().send({\n          from: this.state.account\n        }).then(() => {\n          this.setState({\n            start: true,\n            end: false\n          });\n          console.log(\"Election Started!!\");\n        });\n      }\n    };\n\n    this.EndElection = event => {\n      if (event.target.name === \"endElection\") {\n        this.state.VotingInstance.methods.endElection().send({\n          from: this.state.account\n        }).then(() => {\n          this.setState({\n            start: false,\n            end: true\n          });\n          console.log(\"Election Ended!!\");\n        });\n      }\n    };\n\n    this.AddCandidate = candidate => {\n      this.state.VotingInstance.methods.addCandidate();\n    };\n\n    this.state = {\n      VotingInstance: undefined,\n      account: null,\n      web3: null,\n      isOwner: false\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"your user address is \", this.state.account), this.state.isOwner ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(Admin, {\n      startStatus: this.state.start,\n      endStatus: this.state.end,\n      onEleStartClick: this.StartElection,\n      onEleEndClick: this.EndElection,\n      addCandidate: candidate => {\n        this.AddCandidate(candidate);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"you are Not owner!\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/rajat/Documents/blockchain/my/pet-shop/client/src/App.js"],"names":["React","Component","Voting","getWeb3","Admin","AddCandidateFormComp","App","constructor","props","componentDidMount","window","location","hash","reload","web3","accounts","eth","getAccounts","console","log","networkId","net","getId","deployedNetwork","networks","address","instance","Contract","abi","setState","VotingInstance","account","owner","state","methods","getOwner","call","isOwner","st","getStart","en","getEnd","start","end","error","alert","StartElection","event","target","name","startElection","send","from","then","EndElection","endElection","AddCandidate","candidate","addCandidate","undefined","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Admin from \"./Admin\";\nimport AddCandidateFormComp from \"./AddCandidateFormComp\";\nclass App extends Component {\n  // state = { storageValue: 0, web3: null, accounts: null, contract: null };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      VotingInstance: undefined,\n      account: null,\n      web3: null,\n      isOwner: false,\n    };\n  }\n\n  componentDidMount = async () => {\n    // FOR REFRESHING PAGE ONLY ONCE -\n    if (!window.location.hash) {\n      window.location = window.location + \"#loaded\";\n      window.location.reload();\n    }\n\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      console.log(\"Acooutn s \" + accounts[0]);\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Voting.networks[networkId];\n      console.log(\n        \"networkid: \" +\n          networkId +\n          \"  deploynetworkid : \" +\n          deployedNetwork.address\n      );\n      const instance = new web3.eth.Contract(\n        Voting.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      // this.sue end falseetState({ web3, accounts, contract: instance }, this.runExample);\n      this.setState({\n        VotingInstance: instance,\n        account: accounts[0],\n        web3: web3,\n      });\n      const owner = await this.state.VotingInstance.methods.getOwner().call();\n      if (this.state.account === owner) {\n        this.setState({ isOwner: true });\n      }\n      // this.state.VotingInstance.methods.startElection().send({from:this.state.account});\n\n      let st = await this.state.VotingInstance.methods.getStart().call();\n      let en = await this.state.VotingInstance.methods.getEnd().call();\n      this.setState({ start: st, end: en });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n//-----------------------------------------------------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------------------------------------------------\n   StartElection = (event) => {\n    console.log(this.state.VotingInstance);\n    if (event.target.name === \"startElection\") {\n      this.state.VotingInstance.methods\n        .startElection()\n        .send({ from: this.state.account })\n        .then(() => {\n          this.setState({ start: true, end: false });\n          console.log(\"Election Started!!\")\n        });\n    }\n  };\n  EndElection=(event)=>{\n    if(event.target.name === \"endElection\") {\n      this.state.VotingInstance.methods\n        .endElection()\n        .send({ from: this.state.account })\n        .then(() => {\n          this.setState({ start: false, end: true });\n          console.log(\"Election Ended!!\")\n        });\n    }\n  };\n   AddCandidate = (candidate)=>{\n    this.state.VotingInstance.methods.addCandidate()\n\n  }\n\n  render() {\n    \n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    return (\n      <React.Fragment>\n        <div className=\"App\">\n \n          <div>your user address is {this.state.account}</div>\n          {this.state.isOwner ? (\n            <div>\n                \n              <Admin\n                startStatus={this.state.start}\n                endStatus={this.state.end}\n                onEleStartClick={this.StartElection}\n                onEleEndClick={this.EndElection}\n                addCandidate={(candidate )=>{ this.AddCandidate(candidate)}}\n              />\n            </div>\n          ) : (\n            <div>you are Not owner!</div>\n          )}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}