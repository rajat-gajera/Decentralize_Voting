{"ast":null,"code":"var _jsxFileName = \"/home/rajat/Documents/blockchain/my/pet-shop/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Admin from \"./Admin\";\nimport Voters from \"./Voters\";\nimport ipfs from \"./ipfs\";\n\nclass App extends Component {\n  // state = { storageValue: 0, web3: null, accounts: null, contract: null };\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      // FOR REFRESHING PAGE ONLY ONCE -\n      if (!window.location.hash) {\n        window.location = window.location + \"#loaded\";\n        window.location.reload();\n      }\n\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts();\n        console.log(\"Acooutn s \" + accounts[0]); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = Voting.networks[networkId];\n        console.log(\"networkid: \" + networkId + \"  deploynetworkid : \" + deployedNetwork.address);\n        const instance = new web3.eth.Contract(Voting.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n        // this.sue end falseetState({ web3, accounts, contract: instance }, this.runExample);\n\n        this.setState({\n          VotingInstance: instance,\n          account: accounts[0],\n          web3: web3\n        });\n        const owner = await this.state.VotingInstance.methods.getOwner().call();\n\n        if (this.state.account === owner) {\n          this.setState({\n            isOwner: true\n          });\n        } // this.state.VotingInstance.methods.startElection().send({from:this.state.account});\n\n\n        let st = await this.state.VotingInstance.methods.getStart().call();\n        let en = await this.state.VotingInstance.methods.getEnd().call();\n        this.setState({\n          start: st,\n          end: en\n        });\n        this.updateCandidateList();\n        this.updateVoterList();\n\n        if (this.state.isOwner === false) {\n          this.getCurrentVoter();\n        }\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.getCurrentVoter = () => {\n      this.state.VotingInstance.methods.voterDetails(this.state.account).call().then(cvoter => {\n        if (cvoter.hasVerified === true) {\n          this.setState({\n            voterVerified: true\n          });\n        }\n\n        if (cvoter.hasVoted === true) {\n          this.setState({\n            voted: true\n          });\n        }\n      });\n    };\n\n    this.StartElection = event => {\n      //console.log(this.state.VotingInstance);\n      if (event.target.name === \"startElection\") {\n        this.state.VotingInstance.methods.startElection().send({\n          from: this.state.account\n        }).then(() => {\n          this.setState({\n            start: true,\n            end: false\n          }); //console.log(\"Election Started!!\");\n        });\n      }\n    };\n\n    this.EndElection = event => {\n      if (event.target.name === \"endElection\") {\n        this.state.VotingInstance.methods.endElection().send({\n          from: this.state.account\n        }).then(() => {\n          this.setState({\n            start: false,\n            end: true\n          }); //console.log(\"Election Ended!!\");\n        });\n      }\n    };\n\n    this.updateCandidateList = () => {\n      this.state.VotingInstance.methods.getCandidateNumber().call().then(candidateCount => {\n        var candidatelist = [];\n\n        for (var i = 0; i < candidateCount; i++) {\n          this.state.VotingInstance.methods.candidateDetails(i).call().then(currentCandidate => {\n            candidatelist.push(currentCandidate);\n          });\n        }\n\n        this.setState({\n          candidateList: candidatelist\n        });\n        this.state.VotingInstance.methods.getResultDeclared().call().then(rs => {\n          this.setState({\n            resultDeclared: rs\n          });\n        });\n      });\n    };\n\n    this.AddCandidate = candidate => {\n      console.log(candidate.imgBuffer);\n      ipfs.files.add(candidate.imgBuffer, (error, result) => {\n        if (error) {\n          console.error(error);\n          return;\n        }\n\n        console.log(result);\n      }); // this.state.VotingInstance.methods\n      //   .addCandidate(\n      //     candidate.name,\n      //     candidate.party,\n      //     candidate.manifesto,\n      //     candidate.constituency\n      //   )\n      //   .send({ from: this.state.account })\n      //   .then((response) => {\n      //     alert(response);\n      //     //console.log(response);\n      //   });\n      //  this.updateCandidateList();\n      //  const t =this.state.VotingInstance.methods\n      //     .getCandidateNumber()\n      //     .call()\n      //     .then((candidateCount)=>{\n      //       //console.log(\"----------\")\n      //       //console.log(candidateCount);\n      //       return candidateCount\n      //       });\n    };\n\n    this.requestVoter = voter => {\n      //console.log(\"App js ma \");\n      //console.log(voter);\n      this.state.VotingInstance.methods.requestVoter(voter.name, voter.votingCardNumber, voter.constituency).send({\n        from: this.state.account\n      }).then(() => {//console.log(\"Voter Requested\");\n      });\n    };\n\n    this.updateVoterList = () => {\n      this.state.VotingInstance.methods.getVoterList().call().then(voters => {\n        //  this.setState({ voterList: voters });\n        var i = 0;\n\n        for (i = 0; i < voters.length; i++) {\n          const cvv = voters[i]; //console.log(cvv);\n\n          this.state.VotingInstance.methods.voterDetails(cvv.voterAddress).call().then(cv => {\n            //console.log(cv);\n            const vtList = [...this.state.voterList];\n            vtList.push({\n              voterAddress: cv.voterAddress,\n              name: cv.name,\n              votingCardNumber: cv.votingCardNumber,\n              constituency: cv.constituency,\n              hasVoted: cv.hasVoted,\n              hasVerified: cv.hasVerified\n            });\n            this.setState({\n              voterList: vtList\n            });\n          });\n        }\n      });\n    };\n\n    this.VerifyVoter = _address => {\n      this.state.VotingInstance.methods.verifyVoter(_address).send({\n        from: this.state.account\n      }).then(() => {\n        alert(_address + \"Verfied!!\");\n      });\n    };\n\n    this.Vote = candidate => {\n      alert(candidate.candidateId);\n      this.state.VotingInstance.methods.Vote(candidate.candidateId).send({\n        from: this.state.account\n      }).then(() => {\n        alert(\"You Have Voter to \" + candidate.name);\n      });\n    };\n\n    this.DeclareResult = () => {\n      this.state.VotingInstance.methods.getCandidateNumber().call().then(candidateCount => {\n        var candidatelist = [];\n\n        for (var i = 0; i < candidateCount; i++) {\n          this.state.VotingInstance.methods.candidateDetails(i).call().then(currentCandidate => {\n            candidatelist.push(currentCandidate);\n          });\n        }\n\n        this.setState({\n          candidateList: candidatelist\n        });\n        this.state.VotingInstance.methods.setResultDeclared().send({\n          from: this.state.account\n        }).then(() => {\n          this.setState({\n            resultDeclared: true\n          });\n          alert(\"Result Declared!!\");\n        });\n      });\n    };\n\n    this.state = {\n      VotingInstance: undefined,\n      account: null,\n      web3: null,\n      isOwner: false,\n      candidateList: [],\n      voterList: [],\n      voterequested: false,\n      voted: false,\n      voterVerified: false,\n      resultDeclared: false,\n      currentVoter: null\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, this.state.isOwner ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: \"https://ipfs.io/ipfs/\".concat(this.state.ipfsHash),\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }), React.createElement(Admin, {\n      accountAddress: this.state.account,\n      startStatus: this.state.start,\n      endStatus: this.state.end,\n      onEleStartClick: this.StartElection,\n      onEleEndClick: this.EndElection,\n      addCandidate: candidate => {\n        this.AddCandidate(candidate);\n      },\n      candidateList: this.state.candidateList,\n      voterList: this.state.voterList,\n      verifyVoter: address => {\n        this.VerifyVoter(address);\n      },\n      onDeclareResutClick: this.DeclareResult,\n      resultDeclared: this.state.resultDeclared,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, React.createElement(Voters, {\n      voterRequested: this.state.voterequested,\n      candidateList: this.state.candidateList,\n      requestVoter: voter => {\n        this.requestVoter(voter);\n      },\n      Vote: candidate => {\n        this.Vote(candidate);\n      },\n      hasVoted: this.state.voted,\n      voterVerified: this.state.voterVerified,\n      startStatus: this.state.start,\n      endStatus: this.state.end,\n      resultDeclared: this.state.resultDeclared,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/rajat/Documents/blockchain/my/pet-shop/client/src/App.js"],"names":["React","Component","Voting","getWeb3","Admin","Voters","ipfs","App","constructor","props","componentDidMount","window","location","hash","reload","web3","accounts","eth","getAccounts","console","log","networkId","net","getId","deployedNetwork","networks","address","instance","Contract","abi","setState","VotingInstance","account","owner","state","methods","getOwner","call","isOwner","st","getStart","en","getEnd","start","end","updateCandidateList","updateVoterList","getCurrentVoter","error","alert","voterDetails","then","cvoter","hasVerified","voterVerified","hasVoted","voted","StartElection","event","target","name","startElection","send","from","EndElection","endElection","getCandidateNumber","candidateCount","candidatelist","i","candidateDetails","currentCandidate","push","candidateList","getResultDeclared","rs","resultDeclared","AddCandidate","candidate","imgBuffer","files","add","result","requestVoter","voter","votingCardNumber","constituency","getVoterList","voters","length","cvv","voterAddress","cv","vtList","voterList","VerifyVoter","_address","verifyVoter","Vote","candidateId","DeclareResult","setResultDeclared","undefined","voterequested","currentVoter","render","ipfsHash"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Admin from \"./Admin\";\nimport Voters from \"./Voters\";\nimport ipfs from \"./ipfs\";\nclass App extends Component {\n  // state = { storageValue: 0, web3: null, accounts: null, contract: null };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      VotingInstance: undefined,\n      account: null,\n      web3: null,\n      isOwner: false,\n      candidateList: [],\n      voterList: [],\n      voterequested: false,\n      voted: false,\n      voterVerified: false,\n      resultDeclared: false,\n      currentVoter:null\n    };\n  }\n\n  componentDidMount = async () => {\n    // FOR REFRESHING PAGE ONLY ONCE -\n    if (!window.location.hash) {\n      window.location = window.location + \"#loaded\";\n      window.location.reload();\n    }\n\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      console.log(\"Acooutn s \" + accounts[0]);\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Voting.networks[networkId];\n      console.log(\n        \"networkid: \" +\n          networkId +\n          \"  deploynetworkid : \" +\n          deployedNetwork.address\n      );\n      const instance = new web3.eth.Contract(\n        Voting.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      // this.sue end falseetState({ web3, accounts, contract: instance }, this.runExample);\n      this.setState({\n        VotingInstance: instance,\n        account: accounts[0],\n        web3: web3,\n      });\n      const owner = await this.state.VotingInstance.methods.getOwner().call();\n      if (this.state.account === owner) {\n        this.setState({ isOwner: true });\n      }\n      // this.state.VotingInstance.methods.startElection().send({from:this.state.account});\n\n      let st = await this.state.VotingInstance.methods.getStart().call();\n      let en = await this.state.VotingInstance.methods.getEnd().call();\n      this.setState({ start: st, end: en });\n      this.updateCandidateList();\n      this.updateVoterList();\n       if(this.state.isOwner === false)\n      {\n        this.getCurrentVoter();\n      }\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n  //-----------------------------------------------------------------------------------------------------------------------\n\n  //-----------------------------------------------------------------------------------------------------------------------\n  getCurrentVoter = ()=>{\n    this.state.VotingInstance.methods.voterDetails(this.state.account).call().then((cvoter)=>{\n       if(cvoter.hasVerified === true)\n      {\n        this.setState({voterVerified : true});\n      }\n      if(cvoter.hasVoted=== true)\n      {\n      this.setState({voted:true})\n      }\n    });\n  }\n  StartElection = (event) => {\n    //console.log(this.state.VotingInstance);\n    if (event.target.name === \"startElection\") {\n      this.state.VotingInstance.methods\n        .startElection()\n        .send({ from: this.state.account })\n        .then(() => {\n          this.setState({ start: true, end: false });\n          //console.log(\"Election Started!!\");\n        });\n    }\n  };\n  EndElection = (event) => {\n    if (event.target.name === \"endElection\") {\n      this.state.VotingInstance.methods\n        .endElection()\n        .send({ from: this.state.account })\n        .then(() => {\n          this.setState({ start: false, end: true });\n          //console.log(\"Election Ended!!\");\n        });\n    }\n  };\n  updateCandidateList = () => {\n    this.state.VotingInstance.methods\n    .getCandidateNumber()\n    .call()\n    .then((candidateCount) => {\n      var candidatelist = [];\n      for (var i = 0; i < candidateCount; i++) {\n        this.state.VotingInstance.methods\n          .candidateDetails(i)\n          .call()\n          .then((currentCandidate) => {\n            candidatelist.push(currentCandidate);\n          });\n      }\n      this.setState({ candidateList: candidatelist });\n      this.state.VotingInstance.methods.getResultDeclared().call().then(\n        (rs)=>{\n           this.setState({resultDeclared:rs});\n      });\n    });\n\n\n    \n  };\n  AddCandidate = (candidate) => {\n   console.log(candidate.imgBuffer);\n   ipfs.files.add(candidate.imgBuffer, (error, result) => {\n    if(error) {\n      console.error(error)\n      return\n    }\n    \n    console.log(result);\n  })\n\n  \n  \n   // this.state.VotingInstance.methods\n    //   .addCandidate(\n    //     candidate.name,\n    //     candidate.party,\n    //     candidate.manifesto,\n    //     candidate.constituency\n    //   )\n    //   .send({ from: this.state.account })\n    //   .then((response) => {\n    //     alert(response);\n    //     //console.log(response);\n    //   });\n\n  //  this.updateCandidateList();\n\n    //  const t =this.state.VotingInstance.methods\n    //     .getCandidateNumber()\n    //     .call()\n    //     .then((candidateCount)=>{\n\n    //       //console.log(\"----------\")\n    //       //console.log(candidateCount);\n    //       return candidateCount\n    //       });\n  }\n\n  requestVoter = (voter) => {\n    //console.log(\"App js ma \");\n    //console.log(voter);\n    this.state.VotingInstance.methods\n      .requestVoter(voter.name, voter.votingCardNumber, voter.constituency)\n      .send({ from: this.state.account })\n      .then(() => {\n        //console.log(\"Voter Requested\");\n      });\n  };\n  updateVoterList = () => {\n    this.state.VotingInstance.methods\n      .getVoterList()\n      .call()\n      .then((voters) => {\n        //  this.setState({ voterList: voters });\n        var i = 0;\n        for (i = 0; i < voters.length; i++) {\n          const cvv = voters[i];\n          //console.log(cvv);\n          this.state.VotingInstance.methods\n            .voterDetails(cvv.voterAddress)\n            .call()\n            .then((cv) => {\n              //console.log(cv);\n              const vtList = [...this.state.voterList];\n              vtList.push({\n                voterAddress: cv.voterAddress,\n                name: cv.name,\n                votingCardNumber: cv.votingCardNumber,\n                constituency: cv.constituency,\n                hasVoted: cv.hasVoted,\n                hasVerified: cv.hasVerified,\n              });\n              this.setState({\n                voterList: vtList,\n              });\n            });\n        }\n      });\n  };\n  VerifyVoter = (_address) => {\n    this.state.VotingInstance.methods\n      .verifyVoter(_address)\n      .send({ from: this.state.account })\n      .then(() => {\n        alert(_address + \"Verfied!!\");\n      });\n  };\n  Vote = (candidate) => {\n    alert(candidate.candidateId);\n    this.state.VotingInstance.methods\n      .Vote(candidate.candidateId)\n      .send({ from: this.state.account })\n      .then(() => {\n        alert(\"You Have Voter to \" + candidate.name);\n      });\n  };\n\n  DeclareResult = () => {\n    this.state.VotingInstance.methods\n      .getCandidateNumber()\n      .call()\n      .then((candidateCount) => {\n        var candidatelist = [];\n        for (var i = 0; i < candidateCount; i++) {\n          this.state.VotingInstance.methods\n            .candidateDetails(i)\n            .call()\n            .then((currentCandidate) => {\n              candidatelist.push(currentCandidate);\n            });\n        }\n        this.setState({ candidateList: candidatelist });\n        this.state.VotingInstance.methods\n          .setResultDeclared()\n          .send({ from: this.state.account })\n          .then(() => {\n            this.setState({ resultDeclared: true });\n            alert(\"Result Declared!!\");\n          });\n      });\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    return (\n      <React.Fragment>\n        <div className=\"App\">\n          {this.state.isOwner ? (\n            <div>\n               <img src={`https://ipfs.io/ipfs/${this.state.ipfsHash}`} alt=\"\"/>\n              <Admin\n                accountAddress={this.state.account}\n                startStatus={this.state.start}\n                endStatus={this.state.end}\n                onEleStartClick={this.StartElection}\n                onEleEndClick={this.EndElection}\n                addCandidate={(candidate) => {\n                  this.AddCandidate(candidate);\n                }}\n                candidateList={this.state.candidateList}\n                voterList={this.state.voterList}\n                verifyVoter={(address) => {\n                  this.VerifyVoter(address);\n                }}\n                onDeclareResutClick={this.DeclareResult}\n                resultDeclared={this.state.resultDeclared}\n              />\n            </div>\n          ) : (\n            <div>\n              <Voters\n                voterRequested={this.state.voterequested}\n                candidateList={this.state.candidateList}\n                requestVoter={(voter) => {\n                  this.requestVoter(voter);\n                }}\n                Vote={(candidate) => {\n                  this.Vote(candidate);\n                }}\n                hasVoted={this.state.voted}\n                voterVerified={this.state.voterVerified}\n                startStatus={this.state.start}\n                endStatus={this.state.end}\n                resultDeclared={this.state.resultDeclared}\n\n              />\n            </div>\n          )}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}