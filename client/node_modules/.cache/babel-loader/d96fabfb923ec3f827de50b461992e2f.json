{"ast":null,"code":"var _jsxFileName = \"/home/rajat/Documents/blockchain/my/pet-shop/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  // state = { storageValue: 0, web3: null, accounts: null, contract: null };\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      // FOR REFRESHING PAGE ONLY ONCE -\n      if (!window.location.hash) {\n        window.location = window.location + '#loaded';\n        window.location.reload();\n      }\n\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts();\n        console.log(\"Acooutn s \" + web3.eth.net.getId() + accounts); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = Voting.networks[networkId];\n        console.log(\"networkid: \" + networkId + \"  deploynetworkid : \" + deployedNetwork.address);\n        const instance = new web3.eth.Contract(Voting.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n        // this.setState({ web3, accounts, contract: instance }, this.runExample);\n\n        this.setState({\n          VotingInstance: instance,\n          account: accounts[0],\n          web3: web3\n        });\n        const owner = await this.state.VotingInstance.methods.getOwner().call();\n\n        if (this.state.account === owner) {\n          this.setState({\n            isOwner: true\n          });\n        }\n\n        let start = await this.state.VotingInstance.methods.getStart().call();\n        let end = await this.state.VotingInstance.methods.getEnd().call();\n        this.setState({\n          start: start,\n          end: end\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.state = {\n      VotingInstance: undefined,\n      account: null,\n      web3: null,\n      isOwner: false\n    };\n  }\n\n  // runExample = async () => {\n  //   const { accounts, contract } = this.state;\n  //   // Stores a given value, 5 by default.\n  //     await contract.methods.set(5).send({ from: accounts[0]});\n  //   // Get the value from the contract to prove it worked.\n  //   const response = await contract.methods.get().call();\n  //   // Update state with the result.\n  //   this.setState({ storageValue: response });\n  // };\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Good to Go!\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Your Truffle Box is installed and ready.\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Smart Contract Example\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"If your contracts compiled and migrated successfully, below will show a stored value of 5 (by default).\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Try changing the value stored on \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"line 40\"), \" of App.js.\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Heyy Raaja this is Working fine\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"your user address is \", this.state.account), this.state.isOwner ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"you are owner \") : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"you are  Not owner \"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/rajat/Documents/blockchain/my/pet-shop/client/src/App.js"],"names":["React","Component","SimpleStorageContract","Voting","getWeb3","App","constructor","props","componentDidMount","window","location","hash","reload","web3","accounts","eth","getAccounts","console","log","net","getId","networkId","deployedNetwork","networks","address","instance","Contract","abi","setState","VotingInstance","account","owner","state","methods","getOwner","call","isOwner","start","getStart","end","getEnd","error","alert","undefined","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  // state = { storageValue: 0, web3: null, accounts: null, contract: null };\n\n  constructor(props){\n    super(props)\n    this.state = { VotingInstance : undefined ,account : null, web3 :null , isOwner:false}\n  }\n\n  componentDidMount = async () => {\n    // FOR REFRESHING PAGE ONLY ONCE -\nif(!window.location.hash){\n  window.location = window.location + '#loaded';\n  window.location.reload();\n  }\n\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n       // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n       console.log(\"Acooutn s \" + web3.eth.net.getId() +accounts);\n      \n      \n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Voting.networks[networkId];\n      console.log(\"networkid: \" + networkId +\"  deploynetworkid : \" + deployedNetwork.address);\n      const instance = new web3.eth.Contract(\n        Voting.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      // this.setState({ web3, accounts, contract: instance }, this.runExample);\n      this.setState({VotingInstance : instance, account : accounts[0], web3 : web3});\n      const owner = await this.state.VotingInstance.methods.getOwner().call();\n      if(this.state.account === owner)\n      {\n        this.setState({isOwner : true});\n      }\n\n      let start = await this.state.VotingInstance.methods.getStart().call();\n      let end =  await this.state.VotingInstance.methods.getEnd().call();\n      this.setState({start :start , end : end});\n\n      \n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n    // runExample = async () => {\n    //   const { accounts, contract } = this.state;\n\n    //   // Stores a given value, 5 by default.\n    //     await contract.methods.set(5).send({ from: accounts[0]});\n\n    //   // Get the value from the contract to prove it worked.\n    //   const response = await contract.methods.get().call();\n\n    //   // Update state with the result.\n    //   this.setState({ storageValue: response });\n    // };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <p>\n          If your contracts compiled and migrated successfully, below will show\n          a stored value of 5 (by default).\n        </p>\n        <p>\n          Try changing the value stored on <strong>line 40</strong> of App.js.\n        </p>\n        <div>Heyy Raaja this is Working fine</div>\n        <div>your user address is {this.state.account }</div>\n        {(this.state.isOwner) ?<div>you are owner </div> :<div>you are  Not owner </div>  }\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}