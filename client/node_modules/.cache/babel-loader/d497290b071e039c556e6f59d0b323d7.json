{"ast":null,"code":"import _slicedToArray from \"/home/rajat/Documents/blockchain/my/pet-shop/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/rajat/Documents/blockchain/my/pet-shop/client/src/Main.jsx\";\nimport React, { Component } from 'react';\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { render } from 'react-dom';\n\nconst Main = () => {\n  const _useState = useState(initialState),\n        _useState2 = _slicedToArray(_useState, 2),\n        account = _useState2[0],\n        setaccount = _useState2[1];\n\n  const _useState3 = useState(initialState),\n        _useState4 = _slicedToArray(_useState3, 2),\n        votingInstance = _useState4[0],\n        setvotingInstance = _useState4[1];\n\n  const componentDidMount = async () => {\n    if (window.location.hash) {\n      // FOR REFRESHING PAGE ONLY ONCE -\n      window.location = window.location + \"#loaded\";\n      window.location.reload();\n    }\n\n    try {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      console.log(\"Acooutn s \" + accounts[0]);\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Voting.networks[networkId];\n      console.log(\"networkid: \" + networkId + \"  deploynetworkid : \" + deployedNetwork.address);\n      const instace = new web3.eth.Contract(Voting.abi, deployedNetwork && deployedNetwork.address);\n    } catch (error) {}\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  });\n};\n\nexport default Main;","map":{"version":3,"sources":["/home/rajat/Documents/blockchain/my/pet-shop/client/src/Main.jsx"],"names":["React","Component","Voting","getWeb3","render","Main","useState","initialState","account","setaccount","votingInstance","setvotingInstance","componentDidMount","window","location","hash","reload","web3","accounts","eth","getAccounts","console","log","networkId","net","getId","deployedNetwork","networks","address","instace","Contract","abi","error"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAO,kCAAP;AACA,SAASC,MAAT,QAAuB,WAAvB;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA,oBACeC,QAAQ,CAACC,YAAD,CADvB;AAAA;AAAA,QACRC,OADQ;AAAA,QACCC,UADD;;AAAA,qBAG6BH,QAAQ,CAACC,YAAD,CAHrC;AAAA;AAAA,QAGRG,cAHQ;AAAA,QAGQC,iBAHR;;AAIf,QAAMC,iBAAiB,GAAG,YAAU;AAChC,QAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAnB,EACA;AAAK;AACDF,MAAAA,MAAM,CAACC,QAAP,GAAkBD,MAAM,CAACC,QAAP,GAAkB,SAApC;AACAD,MAAAA,MAAM,CAACC,QAAP,CAAgBE,MAAhB;AACH;;AACD,QAAG;AACC,YAAMC,IAAI,GAAG,MAAMd,OAAO,EAA1B;AACA,YAAMe,QAAQ,GAAI,MAAMD,IAAI,CAACE,GAAL,CAASC,WAAT,EAAxB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAeJ,QAAQ,CAAC,CAAD,CAAnC;AACA,YAAMK,SAAS,GAAG,MAAMN,IAAI,CAACE,GAAL,CAASK,GAAT,CAAaC,KAAb,EAAxB;AACA,YAAMC,eAAe,GAAGxB,MAAM,CAACyB,QAAP,CAAgBJ,SAAhB,CAAxB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAeC,SAAf,GAA0B,sBAA1B,GAAkDG,eAAe,CAACE,OAA9E;AACA,YAAMC,OAAO,GAAG,IAAIZ,IAAI,CAACE,GAAL,CAASW,QAAb,CAAsB5B,MAAM,CAAC6B,GAA7B,EAAkCL,eAAe,IAAIA,eAAe,CAACE,OAArE,CAAhB;AAEH,KATD,CAUA,OAAMI,KAAN,EAAY,CAEX;AACJ,GAnBD;;AAuBK,SAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAR;AAOR,CAlCD;;AAmCA,eAAe3B,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { render } from 'react-dom';\n\nconst Main = () => {\n    const [account, setaccount] = useState(initialState);\n    \n    const [votingInstance, setvotingInstance] = useState(initialState);\n    const componentDidMount = async ()=>{\n        if(window.location.hash)\n        {    // FOR REFRESHING PAGE ONLY ONCE -\n            window.location = window.location + \"#loaded\";\n            window.location.reload();\n        }\n        try{\n            const web3 = await getWeb3();\n            const accounts  = await web3.eth.getAccounts();\n            console.log(\"Acooutn s \" + accounts[0]);\n            const networkId = await web3.eth.net.getId();\n            const deployedNetwork = Voting.networks[networkId];\n            console.log(\"networkid: \" +networkId +\"  deploynetworkid : \" +deployedNetwork.address);\n            const instace = new web3.eth.Contract(Voting.abi, deployedNetwork && deployedNetwork.address);\n\n        }\n        catch(error){\n\n        }\n    }\n\n\n\n         return (<div>\n\n\n\n\n         </div>);\n   \n};\nexport default Main;"]},"metadata":{},"sourceType":"module"}